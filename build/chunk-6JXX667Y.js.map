{"version":3,"sources":["../src/Router.ts"],"sourcesContent":["import { IRequest } from \"./types/Request\";\r\nimport { IRoute, IRouter } from \"./types/Router\";\r\nimport { IMiddleware } from \"./types/Middleware\";\r\nimport { IRestMethods } from \"./types/RestMethods\";\r\n\r\nclass Router implements IRestMethods, IRouter {\r\n  private routes: IRoute[];\r\n  constructor() {\r\n    this.routes = [];\r\n  }\r\n\r\n\r\n  add(method: string, path: string, middlewares: IMiddleware[]): void { // Adiciona uma rota com método e middlewares\r\n    const middleware = middlewares.pop(); // O último argumento é sempre o controlador\r\n    this.routes.push({ method, path, middlewares, middleware });\r\n  }\r\n\r\n  find(req: IRequest): IRoute | undefined {   // Encontra uma rota correspondente com base na requisição\r\n    const { method, url, params } = req;\r\n\r\n    if (!url) return undefined;\r\n\r\n    const route = this.routes.find(r => {\r\n      const pathRegex = new RegExp(\"^\" + r.path.replace(/\\/:([^\\/]+)/g, \"/([^/]+)\") + \"$\");\r\n      return method === r.method && pathRegex.test(url.split('?')[0]);\r\n    });\r\n\r\n    if (route) {\r\n      const pathMatch = url.split('?')[0].match(new RegExp(route.path.replace(/\\/:([^\\/]+)/g, \"/([^/]+)\")));\r\n\r\n      if (pathMatch) {\r\n        const paramNames = (route.path.match(/\\/:([^\\/]+)/g) || []).map(p => p.replace(\"/:\", \"\"));\r\n        req.params = req.params || {}; // Inicializa params se não estiver definido\r\n        \r\n        paramNames.forEach((paramName, index) => {\r\n          req.params![paramName] = pathMatch[index + 1];\r\n        });\r\n      }\r\n    }\r\n\r\n    return route;\r\n  }\r\n\r\n  // Métodos REST para adicionar rotas com diferentes métodos HTTP\r\n  get(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.add('GET', path, middlewares);\r\n  }\r\n\r\n  post(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.add('POST', path, middlewares);\r\n  }\r\n\r\n  put(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.add('PUT', path, middlewares);\r\n  }\r\n\r\n  patch(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.add('PATCH', path, middlewares);\r\n  }\r\n\r\n  delete(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.add('DELETE', path, middlewares);\r\n  }\r\n}\r\n\r\nexport default Router;\r\n"],"mappings":";AAKA,IAAM,SAAN,MAA8C;AAAA,EACpC;AAAA,EACR,cAAc;AACZ,SAAK,SAAS,CAAC;AAAA,EACjB;AAAA,EAGA,IAAI,QAAgB,MAAc,aAAkC;AAClE,UAAM,aAAa,YAAY,IAAI;AACnC,SAAK,OAAO,KAAK,EAAE,QAAQ,MAAM,aAAa,WAAW,CAAC;AAAA,EAC5D;AAAA,EAEA,KAAK,KAAmC;AACtC,UAAM,EAAE,QAAQ,KAAK,OAAO,IAAI;AAEhC,QAAI,CAAC,IAAK,QAAO;AAEjB,UAAM,QAAQ,KAAK,OAAO,KAAK,OAAK;AAClC,YAAM,YAAY,IAAI,OAAO,MAAM,EAAE,KAAK,QAAQ,gBAAgB,UAAU,IAAI,GAAG;AACnF,aAAO,WAAW,EAAE,UAAU,UAAU,KAAK,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,IAChE,CAAC;AAED,QAAI,OAAO;AACT,YAAM,YAAY,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,gBAAgB,UAAU,CAAC,CAAC;AAEpG,UAAI,WAAW;AACb,cAAM,cAAc,MAAM,KAAK,MAAM,cAAc,KAAK,CAAC,GAAG,IAAI,OAAK,EAAE,QAAQ,MAAM,EAAE,CAAC;AACxF,YAAI,SAAS,IAAI,UAAU,CAAC;AAE5B,mBAAW,QAAQ,CAAC,WAAW,UAAU;AACvC,cAAI,OAAQ,SAAS,IAAI,UAAU,QAAQ,CAAC;AAAA,QAC9C,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,IAAI,SAAiB,aAAkC;AACrD,SAAK,IAAI,OAAO,MAAM,WAAW;AAAA,EACnC;AAAA,EAEA,KAAK,SAAiB,aAAkC;AACtD,SAAK,IAAI,QAAQ,MAAM,WAAW;AAAA,EACpC;AAAA,EAEA,IAAI,SAAiB,aAAkC;AACrD,SAAK,IAAI,OAAO,MAAM,WAAW;AAAA,EACnC;AAAA,EAEA,MAAM,SAAiB,aAAkC;AACvD,SAAK,IAAI,SAAS,MAAM,WAAW;AAAA,EACrC;AAAA,EAEA,OAAO,SAAiB,aAAkC;AACxD,SAAK,IAAI,UAAU,MAAM,WAAW;AAAA,EACtC;AACF;AAEA,IAAO,iBAAQ;","names":[]}