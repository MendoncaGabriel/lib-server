{"version":3,"sources":["../src/libserver.ts"],"sourcesContent":["import http from \"node:http\";\r\nimport Router from \"./Router\";\r\nimport RequestHandler from \"./RequestHandler\";\r\n\r\n// middlewares\r\nimport jsonBodyParsin from \"./middlewares/json\";\r\nimport uploadMiddleware from \"./middlewares/upload\";\r\n\r\n// interfaces\r\nimport { IServer } from \"./types/Server\";\r\nimport { IMiddleware } from \"./types/Middleware\";\r\nimport { IRestMethods } from \"./types/RestMethods\";\r\nimport { UploadOptions } from \"./types/UploadOptions\";\r\n\r\nclass Server implements IServer, IRestMethods {\r\n  private middlewares: IMiddleware[];\r\n  private router: Router;\r\n  private requestHandler: RequestHandler;\r\n  private server: http.Server;\r\n\r\n  constructor() {\r\n    this.middlewares = [];\r\n    this.router = new Router();\r\n    this.requestHandler = new RequestHandler(this.middlewares, this.router);\r\n\r\n    this.server = http.createServer((req, res) => {\r\n      const adaptedReq = req as any;\r\n      const adaptedRes = res as any;\r\n      this.requestHandler.handleRequest(adaptedReq, adaptedRes);\r\n    });\r\n  }\r\n\r\n  use(middleware: IMiddleware) {\r\n    this.middlewares.push(middleware);\r\n  }\r\n\r\n  json() {\r\n    return jsonBodyParsin;\r\n  }\r\n\r\n  upload(options: UploadOptions) {\r\n    return uploadMiddleware(options);\r\n  }\r\n\r\n  get(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.get(path, ...middlewares);\r\n  }\r\n\r\n  post(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.post(path, ...middlewares);\r\n  }\r\n\r\n  put(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.put(path, ...middlewares);\r\n  }\r\n\r\n  patch(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.patch(path, ...middlewares);\r\n  }\r\n\r\n  delete(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.delete(path, ...middlewares);\r\n  }\r\n\r\n  listen(port: number, cb: () => void): void {\r\n    this.server.listen(port, cb);\r\n  }\r\n}\r\n\r\nexport default Server;"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,UAAU;AAcjB,IAAM,SAAN,MAA8C;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,cAAc;AACZ,SAAK,cAAc,CAAC;AACpB,SAAK,SAAS,IAAI,eAAO;AACzB,SAAK,iBAAiB,IAAI,uBAAe,KAAK,aAAa,KAAK,MAAM;AAEtE,SAAK,SAAS,KAAK,aAAa,CAAC,KAAK,QAAQ;AAC5C,YAAM,aAAa;AACnB,YAAM,aAAa;AACnB,WAAK,eAAe,cAAc,YAAY,UAAU;AAAA,IAC1D,CAAC;AAAA,EACH;AAAA,EAEA,IAAI,YAAyB;AAC3B,SAAK,YAAY,KAAK,UAAU;AAAA,EAClC;AAAA,EAEA,OAAO;AACL,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,SAAwB;AAC7B,WAAO,eAAiB,OAAO;AAAA,EACjC;AAAA,EAEA,IAAI,SAAiB,aAAkC;AACrD,SAAK,OAAO,IAAI,MAAM,GAAG,WAAW;AAAA,EACtC;AAAA,EAEA,KAAK,SAAiB,aAAkC;AACtD,SAAK,OAAO,KAAK,MAAM,GAAG,WAAW;AAAA,EACvC;AAAA,EAEA,IAAI,SAAiB,aAAkC;AACrD,SAAK,OAAO,IAAI,MAAM,GAAG,WAAW;AAAA,EACtC;AAAA,EAEA,MAAM,SAAiB,aAAkC;AACvD,SAAK,OAAO,MAAM,MAAM,GAAG,WAAW;AAAA,EACxC;AAAA,EAEA,OAAO,SAAiB,aAAkC;AACxD,SAAK,OAAO,OAAO,MAAM,GAAG,WAAW;AAAA,EACzC;AAAA,EAEA,OAAO,MAAc,IAAsB;AACzC,SAAK,OAAO,OAAO,MAAM,EAAE;AAAA,EAC7B;AACF;AAEA,IAAO,oBAAQ;","names":[]}