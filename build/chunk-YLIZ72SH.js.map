{"version":3,"sources":["../src/middlewares/upload.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport { IRequest } from '../types/Request';\r\nimport { UploadOptions } from \"../types/UploadOptions\";\r\n\r\nconst uploadMiddleware = (options: UploadOptions) => {\r\n  const uploadDir = path.resolve(options.path);\r\n\r\n  if (!fs.existsSync(uploadDir)) {\r\n    fs.mkdirSync(uploadDir, { recursive: true });\r\n  }\r\n\r\n  return (req: IRequest, res: any, next: any) => {\r\n    if (!res.locals) {\r\n      res.locals = {};\r\n    }\r\n\r\n    if (\r\n      req.method === 'POST' && \r\n      req.headers['content-type'] && \r\n      req.headers['content-type'].startsWith('multipart/form-data')\r\n    ) {\r\n      const contentType = req.headers['content-type'];\r\n      const boundary = contentType?.split('; ')[1]?.replace('boundary=', '');\r\n\r\n      if (!boundary) {\r\n        res.statusCode = 400;\r\n        return res.end('Boundary ausente no content-type');\r\n      }\r\n\r\n      const chunks: Buffer[] = [];\r\n      let fileSize = 0;\r\n      const MAX_FILE_SIZE = options.maxFileSize || 50 * 1024 * 1024;\r\n\r\n      req.on('data', (chunk: Buffer) => {\r\n        fileSize += chunk.length;\r\n        if (fileSize > MAX_FILE_SIZE) {\r\n          res.statusCode = 413;\r\n          return res.end('Arquivo muito grande');\r\n        }\r\n        chunks.push(chunk);\r\n      });\r\n\r\n      req.on('end', () => {\r\n        try {\r\n          const buffer = Buffer.concat(chunks);\r\n          const boundaryBytes = Buffer.from(`--${boundary}`);\r\n\r\n          let startIndex = 0;\r\n          let filesSaved = [];\r\n\r\n          while ((startIndex = buffer.indexOf(boundaryBytes, startIndex)) !== -1) {\r\n            startIndex += boundaryBytes.length;\r\n            const endIndex = buffer.indexOf(boundaryBytes, startIndex);\r\n            const part = buffer.slice(startIndex, endIndex !== -1 ? endIndex : buffer.length);\r\n            const headerEndIndex = part.indexOf('\\r\\n\\r\\n');\r\n\r\n            if (headerEndIndex === -1) break;\r\n\r\n            const headers = part.slice(0, headerEndIndex).toString('utf8');\r\n            const fileBuffer = part.slice(headerEndIndex + 4);\r\n\r\n            const filenameMatch = headers.match(/filename=\"([^\"]+)\"/);\r\n            if (filenameMatch) {\r\n              const originalFilename = filenameMatch[1];\r\n              const fileExtension = options.format || path.extname(originalFilename);\r\n              let filename =  originalFilename;\r\n              filename += fileExtension;\r\n\r\n              const filePath = path.join(uploadDir, filename);\r\n\r\n              fs.writeFileSync(filePath, fileBuffer);\r\n              filesSaved.push(filePath);\r\n            }\r\n\r\n            if (endIndex === -1) break;\r\n          }\r\n\r\n          req.files = filesSaved;\r\n          res.locals.uploadedFilePaths = filesSaved;\r\n          next();\r\n        } catch (error) {\r\n          console.error('Erro no upload:', error);\r\n          res.statusCode = 500;\r\n          res.end('Erro no upload');\r\n        }\r\n      });\r\n\r\n      req.on('error', (err) => {\r\n        console.error('Erro no upload:', err);\r\n        res.statusCode = 500;\r\n        res.end('Erro no upload');\r\n      });\r\n    } else {\r\n      next();\r\n    }\r\n  };\r\n};\r\n\r\nexport default uploadMiddleware;"],"mappings":";AAAA,OAAO,QAAQ;AACf,OAAO,UAAU;AAIjB,IAAM,mBAAmB,CAAC,YAA2B;AACnD,QAAM,YAAY,KAAK,QAAQ,QAAQ,IAAI;AAE3C,MAAI,CAAC,GAAG,WAAW,SAAS,GAAG;AAC7B,OAAG,UAAU,WAAW,EAAE,WAAW,KAAK,CAAC;AAAA,EAC7C;AAEA,SAAO,CAAC,KAAe,KAAU,SAAc;AAC7C,QAAI,CAAC,IAAI,QAAQ;AACf,UAAI,SAAS,CAAC;AAAA,IAChB;AAEA,QACE,IAAI,WAAW,UACf,IAAI,QAAQ,cAAc,KAC1B,IAAI,QAAQ,cAAc,EAAE,WAAW,qBAAqB,GAC5D;AACA,YAAM,cAAc,IAAI,QAAQ,cAAc;AAC9C,YAAM,WAAW,aAAa,MAAM,IAAI,EAAE,CAAC,GAAG,QAAQ,aAAa,EAAE;AAErE,UAAI,CAAC,UAAU;AACb,YAAI,aAAa;AACjB,eAAO,IAAI,IAAI,kCAAkC;AAAA,MACnD;AAEA,YAAM,SAAmB,CAAC;AAC1B,UAAI,WAAW;AACf,YAAM,gBAAgB,QAAQ,eAAe,KAAK,OAAO;AAEzD,UAAI,GAAG,QAAQ,CAAC,UAAkB;AAChC,oBAAY,MAAM;AAClB,YAAI,WAAW,eAAe;AAC5B,cAAI,aAAa;AACjB,iBAAO,IAAI,IAAI,sBAAsB;AAAA,QACvC;AACA,eAAO,KAAK,KAAK;AAAA,MACnB,CAAC;AAED,UAAI,GAAG,OAAO,MAAM;AAClB,YAAI;AACF,gBAAM,SAAS,OAAO,OAAO,MAAM;AACnC,gBAAM,gBAAgB,OAAO,KAAK,KAAK,QAAQ,EAAE;AAEjD,cAAI,aAAa;AACjB,cAAI,aAAa,CAAC;AAElB,kBAAQ,aAAa,OAAO,QAAQ,eAAe,UAAU,OAAO,IAAI;AACtE,0BAAc,cAAc;AAC5B,kBAAM,WAAW,OAAO,QAAQ,eAAe,UAAU;AACzD,kBAAM,OAAO,OAAO,MAAM,YAAY,aAAa,KAAK,WAAW,OAAO,MAAM;AAChF,kBAAM,iBAAiB,KAAK,QAAQ,UAAU;AAE9C,gBAAI,mBAAmB,GAAI;AAE3B,kBAAM,UAAU,KAAK,MAAM,GAAG,cAAc,EAAE,SAAS,MAAM;AAC7D,kBAAM,aAAa,KAAK,MAAM,iBAAiB,CAAC;AAEhD,kBAAM,gBAAgB,QAAQ,MAAM,oBAAoB;AACxD,gBAAI,eAAe;AACjB,oBAAM,mBAAmB,cAAc,CAAC;AACxC,oBAAM,gBAAgB,QAAQ,UAAU,KAAK,QAAQ,gBAAgB;AACrE,kBAAI,WAAY;AAChB,0BAAY;AAEZ,oBAAM,WAAW,KAAK,KAAK,WAAW,QAAQ;AAE9C,iBAAG,cAAc,UAAU,UAAU;AACrC,yBAAW,KAAK,QAAQ;AAAA,YAC1B;AAEA,gBAAI,aAAa,GAAI;AAAA,UACvB;AAEA,cAAI,QAAQ;AACZ,cAAI,OAAO,oBAAoB;AAC/B,eAAK;AAAA,QACP,SAAS,OAAO;AACd,kBAAQ,MAAM,mBAAmB,KAAK;AACtC,cAAI,aAAa;AACjB,cAAI,IAAI,gBAAgB;AAAA,QAC1B;AAAA,MACF,CAAC;AAED,UAAI,GAAG,SAAS,CAAC,QAAQ;AACvB,gBAAQ,MAAM,mBAAmB,GAAG;AACpC,YAAI,aAAa;AACjB,YAAI,IAAI,gBAAgB;AAAA,MAC1B,CAAC;AAAA,IACH,OAAO;AACL,WAAK;AAAA,IACP;AAAA,EACF;AACF;AAEA,IAAO,iBAAQ;","names":[]}