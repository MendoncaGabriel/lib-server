{"version":3,"sources":["../src/libserver.ts","../src/Router.ts","../src/RequestHandler.ts","../src/middlewares/json.ts","../src/middlewares/upload.ts"],"sourcesContent":["import http from 'node:http';\r\nimport Router from './Router';\r\nimport { IServer } from './types/Server';\r\nimport RequestHandler from './RequestHandler';\r\nimport jsonBodyParsin from './middlewares/json';\r\nimport { IMiddleware } from './types/Middleware';\r\nimport { IRestMethods } from './types/RestMethods';\r\nimport uploadMiddleware from './middlewares/upload';\r\nimport {UploadOptions} from \"./types/UploadOptions\";\r\n\r\nclass Server implements IServer, IRestMethods {\r\n  private middlewares: IMiddleware[];\r\n  private router: Router;\r\n  private requestHandler: RequestHandler;\r\n  private server: http.Server;\r\n\r\n  constructor() {\r\n    this.middlewares = [];\r\n    this.router = new Router();\r\n    this.requestHandler = new RequestHandler(this.middlewares, this.router);\r\n\r\n    this.server = http.createServer((req, res) => {\r\n      const adaptedReq = req as any; \r\n      const adaptedRes = res as any; \r\n      this.requestHandler.handleRequest(adaptedReq, adaptedRes);\r\n    });\r\n  }\r\n\r\n  use(middleware: IMiddleware) {\r\n    this.middlewares.push(middleware);\r\n  }\r\n\r\n  json() {\r\n    return jsonBodyParsin;\r\n  }\r\n\r\n  upload(options: UploadOptions) {\r\n    return uploadMiddleware(options);\r\n  }\r\n\r\n  get(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.get(path, ...middlewares);\r\n  }\r\n\r\n  post(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.post(path, ...middlewares);\r\n  }\r\n\r\n  put(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.put(path, ...middlewares);\r\n  }\r\n\r\n  patch(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.patch(path, ...middlewares);\r\n  }\r\n\r\n  delete(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.router.delete(path, ...middlewares);\r\n  }\r\n\r\n  listen(port: number, cb: () => void): void {\r\n    this.server.listen(port, cb);\r\n  }\r\n}\r\n\r\nexport default Server;","import { IMiddleware } from \"./types/Middleware\";\r\nimport { IRequest } from \"./types/Request\";\r\nimport { IRestMethods } from \"./types/RestMethods\";\r\nimport { IRoute, IRouter } from \"./types/Router\";\r\n\r\n\r\nclass Router implements IRestMethods, IRouter {\r\n  private routes: IRoute[];\r\n\r\n  constructor() {\r\n    this.routes = [];\r\n  }\r\n\r\n  \r\n  addRouter(method: string, path: string, middlewares: IMiddleware[]): void { // Adiciona uma rota com método e middlewares\r\n    const middleware = middlewares.pop(); // O último argumento é sempre o controlador\r\n    this.routes.push({ method, path, middlewares, middleware });\r\n  }\r\n\r\n  findRoute(req: IRequest): IRoute | undefined {   // Encontra uma rota correspondente com base na requisição\r\n    const { method, url, params } = req;\r\n\r\n    if (!url) return undefined;\r\n\r\n    const route = this.routes.find(r => {\r\n      const pathRegex = new RegExp(\"^\" + r.path.replace(/\\/:([^\\/]+)/g, \"/([^/]+)\") + \"$\");\r\n      return method === r.method && pathRegex.test(url.split('?')[0]);\r\n    });\r\n\r\n    if (route) {\r\n      const pathMatch = url.split('?')[0].match(new RegExp(route.path.replace(/\\/:([^\\/]+)/g, \"/([^/]+)\")));\r\n\r\n      if (pathMatch) {\r\n        const paramNames = (route.path.match(/\\/:([^\\/]+)/g) || []).map(p => p.replace(\"/:\", \"\"));\r\n        req.params = req.params || {}; // Inicializa params se não estiver definido\r\n        \r\n        paramNames.forEach((paramName, index) => {\r\n          req.params![paramName] = pathMatch[index + 1];\r\n        });\r\n      }\r\n    }\r\n\r\n    return route;\r\n  }\r\n\r\n  // Métodos REST para adicionar rotas com diferentes métodos HTTP\r\n  get(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.addRouter('GET', path, middlewares);\r\n  }\r\n\r\n  post(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.addRouter('POST', path, middlewares);\r\n  }\r\n\r\n  put(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.addRouter('PUT', path, middlewares);\r\n  }\r\n\r\n  patch(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.addRouter('PATCH', path, middlewares);\r\n  }\r\n\r\n  delete(path: string, ...middlewares: IMiddleware[]): void {\r\n    this.addRouter('DELETE', path, middlewares);\r\n  }\r\n}\r\n\r\nexport default Router;\r\n","import { IMiddleware } from \"./types/Middleware\";\r\nimport { IRequest } from \"./types/Request\";\r\nimport { IResponse } from \"./types/Response\";\r\nimport Router from \"./Router\";\r\nimport { INext } from \"./types/Next\";\r\n\r\ninterface IRequestHandler {\r\n  handleRequest(req: IRequest, res: IResponse): Promise<void>;\r\n  parseQueryParams(req: IRequest): { [key: string]: string };\r\n  processRoute(req: IRequest, res: IResponse): void;\r\n}\r\n\r\nclass RequestHandler implements IRequestHandler {\r\n  private middlewares: IMiddleware[];\r\n  private router: Router;\r\n\r\n  constructor(middlewares: IMiddleware[], router: Router) {\r\n    this.middlewares = middlewares;\r\n    this.router = router;\r\n  }\r\n\r\n  async handleRequest(req: IRequest, res: IResponse): Promise<void> {\r\n    req.params = {};\r\n    req.query = this.parseQueryParams(req);\r\n\r\n    let index = 0;\r\n\r\n    // Função para aplicar middlewares globais\r\n    const globalNext = () => {\r\n      if (index < this.middlewares.length) {\r\n        const middleware = this.middlewares[index];\r\n        index++;\r\n        middleware(req, res, globalNext);\r\n      } else {\r\n        this.processRoute(req, res);\r\n      }\r\n    };\r\n\r\n    // Começar a aplicar middlewares\r\n    globalNext();\r\n  }\r\n\r\n  parseQueryParams(req: IRequest): { [key: string]: string } {\r\n    const url = req.url ? new URL(req.url, `http://${req.headers.host}`) : new URL('', `http://${req.headers.host}`);\r\n    return Object.fromEntries(url.searchParams.entries());\r\n  }\r\n\r\n  processRoute(req: IRequest, res: IResponse): void {\r\n    const route = this.router.findRoute(req);\r\n  \r\n    if (route) {\r\n      let index = 0;\r\n      const routeNext: INext = (err?: any) => {\r\n        if (err) {\r\n          res.statusCode = 500;\r\n          const errorMessage = err instanceof Error ? err.message : 'Unknown Error';\r\n          res.end(`Internal Server Error: ${errorMessage}`);\r\n          return;\r\n        }\r\n  \r\n        if (index < route.middlewares.length) {\r\n          const middleware = route.middlewares[index];\r\n          index++;\r\n          try {\r\n            middleware(req, res, routeNext);\r\n          } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : 'Unknown Error';\r\n            res.statusCode = 500;\r\n            res.end(`Internal Server Error: ${errorMessage}`);\r\n          }\r\n        } else {\r\n          if (route.middleware) {\r\n            try {\r\n              route.middleware(req, res, () => {});\r\n            } catch (error) {\r\n              const errorMessage = error instanceof Error ? error.message : 'Unknown Error';\r\n              res.statusCode = 500;\r\n              res.end(`Internal Server Error: ${errorMessage}`);\r\n            }\r\n          } else {\r\n            res.statusCode = 500;\r\n            res.end(\"Internal Server Error: No controller provided\");\r\n          }\r\n        }\r\n      };\r\n  \r\n      routeNext();\r\n    } else {\r\n      res.statusCode = 404;\r\n      res.end(\"Not Found\");\r\n    }\r\n  }\r\n  \r\n}\r\n  \r\n\r\nexport default RequestHandler;\r\n","import { IRequest } from \"../types/Request\";\r\nimport { IResponse } from \"../types/Response\";\r\nimport { INext } from \"../types/Next\";\r\n\r\nconst jsonBodyParsin = async (req: IRequest, res: IResponse, next: INext) => {\r\n  if (req.method === \"POST\" || req.method === \"PUT\" || req.method === \"PATCH\") {\r\n\r\n    if (req.headers['content-type']?.startsWith('application/json')) { // Verifique se o Content-Type é application/json\r\n      try {\r\n        req.body = await new Promise<any>((resolve, reject) => {\r\n          let bodyString = \"\";\r\n\r\n          req.on(\"data\", (chunk) => {\r\n            bodyString += chunk.toString();\r\n          });\r\n\r\n          req.on(\"end\", () => {\r\n            try {\r\n              resolve(JSON.parse(bodyString));\r\n            } catch (error) {\r\n              reject(error);\r\n            }\r\n          });\r\n\r\n          req.on(\"error\", (err) => {\r\n            reject(err);\r\n          });\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error) {\r\n          res.statusCode = 400;\r\n          res.end(`Erro no parse do JSON: ${error.message}`);\r\n        } else {\r\n          res.statusCode = 400;\r\n          res.end(\"Erro desconhecido no parse do JSON\");\r\n        }\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  next();\r\n};\r\n\r\nexport default jsonBodyParsin;\r\n","import fs from 'fs';\r\nimport path from 'path';\r\nimport { IRequest } from '../types/Request';\r\nimport { UploadOptions } from \"../types/UploadOptions\";\r\n\r\nconst uploadMiddleware = (options: UploadOptions) => {\r\n  const uploadDir = path.resolve(options.path);\r\n\r\n  if (!fs.existsSync(uploadDir)) {\r\n    fs.mkdirSync(uploadDir, { recursive: true });\r\n  }\r\n\r\n  return (req: IRequest, res: any, next: any) => {\r\n    if (!res.locals) {\r\n      res.locals = {};\r\n    }\r\n\r\n    if (\r\n      req.method === 'POST' && \r\n      req.headers['content-type'] && \r\n      req.headers['content-type'].startsWith('multipart/form-data')\r\n    ) {\r\n      const contentType = req.headers['content-type'];\r\n      const boundary = contentType?.split('; ')[1]?.replace('boundary=', '');\r\n\r\n      if (!boundary) {\r\n        res.statusCode = 400;\r\n        return res.end('Boundary ausente no content-type');\r\n      }\r\n\r\n      const chunks: Buffer[] = [];\r\n      let fileSize = 0;\r\n      const MAX_FILE_SIZE = options.maxFileSize || 50 * 1024 * 1024;\r\n\r\n      req.on('data', (chunk: Buffer) => {\r\n        fileSize += chunk.length;\r\n        if (fileSize > MAX_FILE_SIZE) {\r\n          res.statusCode = 413;\r\n          return res.end('Arquivo muito grande');\r\n        }\r\n        chunks.push(chunk);\r\n      });\r\n\r\n      req.on('end', () => {\r\n        try {\r\n          const buffer = Buffer.concat(chunks);\r\n          const boundaryBytes = Buffer.from(`--${boundary}`);\r\n\r\n          let startIndex = 0;\r\n          let filesSaved = [];\r\n\r\n          while ((startIndex = buffer.indexOf(boundaryBytes, startIndex)) !== -1) {\r\n            startIndex += boundaryBytes.length;\r\n            const endIndex = buffer.indexOf(boundaryBytes, startIndex);\r\n            const part = buffer.slice(startIndex, endIndex !== -1 ? endIndex : buffer.length);\r\n            const headerEndIndex = part.indexOf('\\r\\n\\r\\n');\r\n\r\n            if (headerEndIndex === -1) break;\r\n\r\n            const headers = part.slice(0, headerEndIndex).toString('utf8');\r\n            const fileBuffer = part.slice(headerEndIndex + 4);\r\n\r\n            const filenameMatch = headers.match(/filename=\"([^\"]+)\"/);\r\n            if (filenameMatch) {\r\n              const originalFilename = filenameMatch[1];\r\n              const fileExtension = options.format || path.extname(originalFilename);\r\n              let filename =  originalFilename;\r\n              filename += fileExtension;\r\n\r\n              const filePath = path.join(uploadDir, filename);\r\n\r\n              fs.writeFileSync(filePath, fileBuffer);\r\n              filesSaved.push(filePath);\r\n            }\r\n\r\n            if (endIndex === -1) break;\r\n          }\r\n\r\n          req.files = filesSaved;\r\n          res.locals.uploadedFilePaths = filesSaved;\r\n          next();\r\n        } catch (error) {\r\n          console.error('Erro no upload:', error);\r\n          res.statusCode = 500;\r\n          res.end('Erro no upload');\r\n        }\r\n      });\r\n\r\n      req.on('error', (err) => {\r\n        console.error('Erro no upload:', err);\r\n        res.statusCode = 500;\r\n        res.end('Erro no upload');\r\n      });\r\n    } else {\r\n      next();\r\n    }\r\n  };\r\n};\r\n\r\nexport default uploadMiddleware;"],"mappings":"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","names":["path","path"]}