{"version":3,"sources":["typescript/src/RequestHandler.ts"],"sourcesContent":["import { IMiddleware } from \"./types/Middleware\";\r\nimport { IRequest } from \"./types/Request\";\r\nimport { IResponse } from \"./types/Response\";\r\nimport Router from \"./Router\";\r\nimport { INext } from \"./types/Next\";\r\n\r\ninterface IRequestHandler {\r\n  handleRequest(req: IRequest, res: IResponse): Promise<void>;\r\n  parseQueryParams(req: IRequest): { [key: string]: string };\r\n  processRoute(req: IRequest, res: IResponse): void;\r\n}\r\n\r\nclass RequestHandler implements IRequestHandler {\r\n  private middlewares: IMiddleware[];\r\n  private router: Router;\r\n\r\n  constructor(middlewares: IMiddleware[], router: Router) {\r\n    this.middlewares = middlewares;\r\n    this.router = router;\r\n  }\r\n\r\n  async handleRequest(req: IRequest, res: IResponse): Promise<void> {\r\n    req.params = {};\r\n    req.query = this.parseQueryParams(req);\r\n\r\n    let index = 0;\r\n\r\n    // Função para aplicar middlewares globais\r\n    const globalNext = () => {\r\n      if (index < this.middlewares.length) {\r\n        const middleware = this.middlewares[index];\r\n        index++;\r\n        middleware(req, res, globalNext);\r\n      } else {\r\n        this.processRoute(req, res);\r\n      }\r\n    };\r\n\r\n    // Começar a aplicar middlewares\r\n    globalNext();\r\n  }\r\n\r\n  parseQueryParams(req: IRequest): { [key: string]: string } {\r\n    const url = req.url ? new URL(req.url, `http://${req.headers.host}`) : new URL('', `http://${req.headers.host}`);\r\n    return Object.fromEntries(url.searchParams.entries());\r\n  }\r\n\r\n  processRoute(req: IRequest, res: IResponse): void {\r\n    const route = this.router.findRoute(req);\r\n  \r\n    if (route) {\r\n      let index = 0;\r\n      const routeNext: INext = (err?: any) => {\r\n        if (err) {\r\n          res.statusCode = 500;\r\n          const errorMessage = err instanceof Error ? err.message : 'Unknown Error';\r\n          res.end(`Internal Server Error: ${errorMessage}`);\r\n          return;\r\n        }\r\n  \r\n        if (index < route.middlewares.length) {\r\n          const middleware = route.middlewares[index];\r\n          index++;\r\n          try {\r\n            middleware(req, res, routeNext);\r\n          } catch (error) {\r\n            const errorMessage = error instanceof Error ? error.message : 'Unknown Error';\r\n            res.statusCode = 500;\r\n            res.end(`Internal Server Error: ${errorMessage}`);\r\n          }\r\n        } else {\r\n          if (route.middleware) {\r\n            try {\r\n              route.middleware(req, res, () => {});\r\n            } catch (error) {\r\n              const errorMessage = error instanceof Error ? error.message : 'Unknown Error';\r\n              res.statusCode = 500;\r\n              res.end(`Internal Server Error: ${errorMessage}`);\r\n            }\r\n          } else {\r\n            res.statusCode = 500;\r\n            res.end(\"Internal Server Error: No controller provided\");\r\n          }\r\n        }\r\n      };\r\n  \r\n      routeNext();\r\n    } else {\r\n      res.statusCode = 404;\r\n      res.end(\"Not Found\");\r\n    }\r\n  }\r\n  \r\n}\r\n  \r\n\r\nexport default RequestHandler;\r\n"],"mappings":";AAYA,IAAM,iBAAN,MAAgD;AAAA,EACtC;AAAA,EACA;AAAA,EAER,YAAY,aAA4B,QAAgB;AACtD,SAAK,cAAc;AACnB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAM,cAAc,KAAe,KAA+B;AAChE,QAAI,SAAS,CAAC;AACd,QAAI,QAAQ,KAAK,iBAAiB,GAAG;AAErC,QAAI,QAAQ;AAGZ,UAAM,aAAa,MAAM;AACvB,UAAI,QAAQ,KAAK,YAAY,QAAQ;AACnC,cAAM,aAAa,KAAK,YAAY,KAAK;AACzC;AACA,mBAAW,KAAK,KAAK,UAAU;AAAA,MACjC,OAAO;AACL,aAAK,aAAa,KAAK,GAAG;AAAA,MAC5B;AAAA,IACF;AAGA,eAAW;AAAA,EACb;AAAA,EAEA,iBAAiB,KAA0C;AACzD,UAAM,MAAM,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,UAAU,IAAI,QAAQ,IAAI,EAAE,IAAI,IAAI,IAAI,IAAI,UAAU,IAAI,QAAQ,IAAI,EAAE;AAC/G,WAAO,OAAO,YAAY,IAAI,aAAa,QAAQ,CAAC;AAAA,EACtD;AAAA,EAEA,aAAa,KAAe,KAAsB;AAChD,UAAM,QAAQ,KAAK,OAAO,UAAU,GAAG;AAEvC,QAAI,OAAO;AACT,UAAI,QAAQ;AACZ,YAAM,YAAmB,CAAC,QAAc;AACtC,YAAI,KAAK;AACP,cAAI,aAAa;AACjB,gBAAM,eAAe,eAAe,QAAQ,IAAI,UAAU;AAC1D,cAAI,IAAI,0BAA0B,YAAY,EAAE;AAChD;AAAA,QACF;AAEA,YAAI,QAAQ,MAAM,YAAY,QAAQ;AACpC,gBAAM,aAAa,MAAM,YAAY,KAAK;AAC1C;AACA,cAAI;AACF,uBAAW,KAAK,KAAK,SAAS;AAAA,UAChC,SAAS,OAAO;AACd,kBAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAC9D,gBAAI,aAAa;AACjB,gBAAI,IAAI,0BAA0B,YAAY,EAAE;AAAA,UAClD;AAAA,QACF,OAAO;AACL,cAAI,MAAM,YAAY;AACpB,gBAAI;AACF,oBAAM,WAAW,KAAK,KAAK,MAAM;AAAA,cAAC,CAAC;AAAA,YACrC,SAAS,OAAO;AACd,oBAAM,eAAe,iBAAiB,QAAQ,MAAM,UAAU;AAC9D,kBAAI,aAAa;AACjB,kBAAI,IAAI,0BAA0B,YAAY,EAAE;AAAA,YAClD;AAAA,UACF,OAAO;AACL,gBAAI,aAAa;AACjB,gBAAI,IAAI,+CAA+C;AAAA,UACzD;AAAA,QACF;AAAA,MACF;AAEA,gBAAU;AAAA,IACZ,OAAO;AACL,UAAI,aAAa;AACjB,UAAI,IAAI,WAAW;AAAA,IACrB;AAAA,EACF;AAEF;AAGA,IAAO,yBAAQ;","names":[]}